package rv

import (
	"testing"
)

// https://riscv.github.io/riscv-isa-manual/snapshot/unprivileged/#immtypes

func TestImmB(t *testing.T) {
	testImm(t, "immB", immB, 12+1, immTestData{
		0b_0000000_0000000000000_0001_0_0000000: 0b_000000000001_0,
		0b_0000000_0000000000000_0010_0_0000000: 0b_000000000010_0,
		0b_0000000_0000000000000_0100_0_0000000: 0b_000000000100_0,
		0b_0000000_0000000000000_1000_0_0000000: 0b_000000001000_0,
		0b_0000001_0000000000000_0000_0_0000000: 0b_000000010000_0,
		0b_0000010_0000000000000_0000_0_0000000: 0b_000000100000_0,
		0b_0000100_0000000000000_0000_0_0000000: 0b_000001000000_0,
		0b_0001000_0000000000000_0000_0_0000000: 0b_000010000000_0,
		0b_0010000_0000000000000_0000_0_0000000: 0b_000100000000_0,
		0b_0100000_0000000000000_0000_0_0000000: 0b_001000000000_0,
		0b_0000000_0000000000000_0000_1_0000000: 0b_010000000000_0,
		0b_1000000_0000000000000_0000_0_0000000: 0b_100000000000_0,
		0b_1111111_0000000000000_1111_1_0000000: 0b_111111111111_0,
	})
}

func TestImmI(t *testing.T) {
	testImm(t, "immI", immI, 12, immTestData{
		0b_000000000001_00000000000000000000: 0b_000000000001,
		0b_000000000010_00000000000000000000: 0b_000000000010,
		0b_000000000100_00000000000000000000: 0b_000000000100,
		0b_000000001000_00000000000000000000: 0b_000000001000,
		0b_000000010000_00000000000000000000: 0b_000000010000,
		0b_000000100000_00000000000000000000: 0b_000000100000,
		0b_000001000000_00000000000000000000: 0b_000001000000,
		0b_000010000000_00000000000000000000: 0b_000010000000,
		0b_000100000000_00000000000000000000: 0b_000100000000,
		0b_001000000000_00000000000000000000: 0b_001000000000,
		0b_010000000000_00000000000000000000: 0b_010000000000,
		0b_100000000000_00000000000000000000: 0b_100000000000,
		0b_111111111111_00000000000000000000: 0b_111111111111,
	})
}

func TestImmJ(t *testing.T) {
	testImm(t, "immJ", immJ, 20+1, immTestData{
		0b_0_0000000001_0_00000000_000000000000: 0b_00000000000000000001_0,
		0b_0_0000000010_0_00000000_000000000000: 0b_00000000000000000010_0,
		0b_0_0000000100_0_00000000_000000000000: 0b_00000000000000000100_0,
		0b_0_0000001000_0_00000000_000000000000: 0b_00000000000000001000_0,
		0b_0_0000010000_0_00000000_000000000000: 0b_00000000000000010000_0,
		0b_0_0000100000_0_00000000_000000000000: 0b_00000000000000100000_0,
		0b_0_0001000000_0_00000000_000000000000: 0b_00000000000001000000_0,
		0b_0_0010000000_0_00000000_000000000000: 0b_00000000000010000000_0,
		0b_0_0100000000_0_00000000_000000000000: 0b_00000000000100000000_0,
		0b_0_1000000000_0_00000000_000000000000: 0b_00000000001000000000_0,
		0b_0_0000000000_1_00000000_000000000000: 0b_00000000010000000000_0,
		0b_0_0000000000_0_00000001_000000000000: 0b_00000000100000000000_0,
		0b_0_0000000000_0_00000010_000000000000: 0b_00000001000000000000_0,
		0b_0_0000000000_0_00000100_000000000000: 0b_00000010000000000000_0,
		0b_0_0000000000_0_00001000_000000000000: 0b_00000100000000000000_0,
		0b_0_0000000000_0_00010000_000000000000: 0b_00001000000000000000_0,
		0b_0_0000000000_0_00100000_000000000000: 0b_00010000000000000000_0,
		0b_0_0000000000_0_01000000_000000000000: 0b_00100000000000000000_0,
		0b_0_0000000000_0_10000000_000000000000: 0b_01000000000000000000_0,
		0b_1_0000000000_0_00000000_000000000000: 0b_10000000000000000000_0,
		0b_1_1111111111_1_11111111_000000000000: 0b_11111111111111111111_0,
	})
}

func TestImmS(t *testing.T) {
	testImm(t, "immS", immS, 12, immTestData{
		0b_0000000_0000000000000_00001_0000000: 0b_000000000001,
		0b_0000000_0000000000000_00010_0000000: 0b_000000000010,
		0b_0000000_0000000000000_00100_0000000: 0b_000000000100,
		0b_0000000_0000000000000_01000_0000000: 0b_000000001000,
		0b_0000000_0000000000000_10000_0000000: 0b_000000010000,
		0b_0000001_0000000000000_00000_0000000: 0b_000000100000,
		0b_0000010_0000000000000_00000_0000000: 0b_000001000000,
		0b_0000100_0000000000000_00000_0000000: 0b_000010000000,
		0b_0001000_0000000000000_00000_0000000: 0b_000100000000,
		0b_0010000_0000000000000_00000_0000000: 0b_001000000000,
		0b_0100000_0000000000000_00000_0000000: 0b_010000000000,
		0b_1000000_0000000000000_00000_0000000: 0b_100000000000,
		0b_1111111_0000000000000_11111_0000000: 0b_111111111111,
	})
}

func TestImmU(t *testing.T) {
	testImm(t, "immU", immU, 20+12, immTestData{
		0b_00000000000000000001_000000000000: 0b_00000000000000000001_000000000000,
		0b_00000000000000000010_000000000000: 0b_00000000000000000010_000000000000,
		0b_00000000000000000100_000000000000: 0b_00000000000000000100_000000000000,
		0b_00000000000000001000_000000000000: 0b_00000000000000001000_000000000000,
		0b_00000000000000010000_000000000000: 0b_00000000000000010000_000000000000,
		0b_00000000000000100000_000000000000: 0b_00000000000000100000_000000000000,
		0b_00000000000001000000_000000000000: 0b_00000000000001000000_000000000000,
		0b_00000000000010000000_000000000000: 0b_00000000000010000000_000000000000,
		0b_00000000000100000000_000000000000: 0b_00000000000100000000_000000000000,
		0b_00000000001000000000_000000000000: 0b_00000000001000000000_000000000000,
		0b_00000000010000000000_000000000000: 0b_00000000010000000000_000000000000,
		0b_00000000100000000000_000000000000: 0b_00000000100000000000_000000000000,
		0b_00000001000000000000_000000000000: 0b_00000001000000000000_000000000000,
		0b_00000010000000000000_000000000000: 0b_00000010000000000000_000000000000,
		0b_00000100000000000000_000000000000: 0b_00000100000000000000_000000000000,
		0b_00001000000000000000_000000000000: 0b_00001000000000000000_000000000000,
		0b_00010000000000000000_000000000000: 0b_00010000000000000000_000000000000,
		0b_00100000000000000000_000000000000: 0b_00100000000000000000_000000000000,
		0b_01000000000000000000_000000000000: 0b_01000000000000000000_000000000000,
		0b_10000000000000000000_000000000000: 0b_10000000000000000000_000000000000,
		0b_11111111111111111111_000000000000: 0b_11111111111111111111_000000000000,
	})
}

type immTestData map[int]int

func testImm(t *testing.T, fnName string, fn func(int) int, w int, tests immTestData) {
	tests[0] = 0 // include all-zeros test case

	biggest := 0
	for k := range tests {
		biggest = max(biggest, k)
	}
	tests[-1] = tests[biggest] // include all-ones test case

	for arg, want := range tests {
		want = signBit(want, w-1)<<w | want

		if got := fn(arg); want != got {
			t.Errorf("%v(0b_%032b):\nwant 0b_%032b\n got 0b_%032b",
				fnName, uint32(arg), uint32(want), uint32(got))
		}
	}
}

func testImmUnsigned(t *testing.T, fnName string, fn func(int) int, w int, tests immTestData) {
	testImm(t, fnName, fn, 1+w, tests)
}
